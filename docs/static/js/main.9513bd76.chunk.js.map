{"version":3,"sources":["images/bg.png","helpers/gameHelpers.js","helpers/tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","hooks/useInterval.js","hooks/useGameStatus.js","components/Cell/styles.js","components/Cell/index.js","components/Stage/styles.js","components/Stage/index.js","components/StartButton/styles.js","components/StartButton/index.js","components/Display/styles.js","components/Display/index.js","components/Tetris/style.js","components/Tetris/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","position","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","getRandomTetromino","tetrominoKey","Math","floor","random","usePlayer","useState","isCollided","setPlayer","resetPlayer","useCallback","STAGE_WIDTH","rotate","direction","rotatedTetromino","map","_","index","row","reverse","prevPlayer","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","acc","find","push","prevState","unshift","sweepRows","useInterval","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useGameStatus","score","setScore","rows","setRows","level","setLevel","linePoints","calculateScore","prevScore","prevRows","CellWrapper","styled","div","type","memo","StageWrapper","height","width","Stage","key","StartButtonWrapper","button","StartButton","onClick","DisplayWrapper","isGameOver","Display","text","TetrisWrapper","backgroundImage","TetrisContainer","Tetris","speed","setSpeed","setGameOver","updatePlayerPosition","rotatePlayer","movePlayer","drop","prevLevel","move","keyCode","onKeyUp","onKeyDown","event","tabindex","role","App","props","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9513bd76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          !stage[y + player.position.y + moveY] ||\n          !stage[y + player.position.y + moveY][\n            x + player.position.x + moveX\n          ] ||\n          stage[y + player.position.y + moveY][\n            x + player.position.x + moveX\n          ][1] !== \"clear\"\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: \"0,0,0\" },\n  I: {\n    shape: [\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n    ],\n    color: \"80,227,230\",\n  },\n  J: {\n    shape: [\n      [0, \"J\", 0],\n      [0, \"J\", 0],\n      [\"J\", \"J\", 0],\n    ],\n    color: \"36,95,223\",\n  },\n  L: {\n    shape: [\n      [0, \"L\", 0],\n      [0, \"L\", 0],\n      [0, \"L\", \"L\"],\n    ],\n    color: \"223,173,36\",\n  },\n  O: {\n    shape: [\n      [\"O\", \"O\"],\n      [\"O\", \"O\"],\n    ],\n    color: \"223,217,36\",\n  },\n  S: {\n    shape: [\n      [0, \"S\", \"S\"],\n      [\"S\", \"S\", 0],\n      [0, 0, 0],\n    ],\n    color: \"48,211,36\",\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      [0, \"T\", 0],\n      [\"T\", \"T\", \"T\"],\n    ],\n    color: \"132,61,36\",\n  },\n  Z: {\n    shape: [\n      [\"Z\", \"Z\", 0],\n      [0, \"Z\", \"Z\"],\n      [0, 0, 0],\n    ],\n    color: \"227,78,78\",\n  },\n};\n\nexport const getRandomTetromino = () => {\n  const tetrominos = \"IJLOSTZ\";\n  const tetrominoKey =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[tetrominoKey];\n};\n","import { useState, useCallback } from \"react\";\nimport { getRandomTetromino, TETROMINOS } from \"../helpers/tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../helpers/gameHelpers\";\n\nconst usePlayer = () => {\n  const [player, setPlayer] = useState({\n    position: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    isCollided: false,\n  });\n\n  const updatePlayerPosition = ({ x, y, isCollided }) => {\n    setPlayer((prevPlayer) => ({\n      ...prevPlayer,\n      position: { x: prevPlayer.position.x + x, y: prevPlayer.position.y + y },\n      isCollided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      position: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: getRandomTetromino().shape,\n      isCollided: false,\n    });\n  }, []);\n\n  const rotate = (tetromino, direction) => {\n    // Make rows to become coumns\n    const rotatedTetromino = tetromino.map((_, index) =>\n      tetromino.map((row) => row[index])\n    );\n    if (direction > 0) {\n      return rotatedTetromino.map((row) => row.reverse());\n    } else {\n      return rotatedTetromino.reverse();\n    }\n  };\n\n  const rotatePlayer = (stage, direction) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\n\n    const position = clonedPlayer.position.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.position.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -direction);\n        clonedPlayer.position = position;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  return [player, updatePlayerPosition, resetPlayer, rotatePlayer];\n};\n\nexport default usePlayer;\n","import { useState, useEffect } from \"react\";\nimport { createStage } from \"../helpers/gameHelpers\";\n\nconst useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = (newStage) =>\n      newStage.reduce((acc, row) => {\n        if (!row.find((cell) => cell[0] === 0)) {\n          setRowsCleared((prevState) => prevState + 1);\n          acc.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n          return acc;\n        }\n        acc.push(row);\n        return acc;\n      }, []);\n\n    const updateStage = (prevStage) => {\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.position.y][x + player.position.x] = [\n              value,\n              `${player.isCollided ? \"merged\" : \"clear\"}`,\n            ];\n          }\n        });\n      });\n\n      // Check if we collided\n\n      if (player.isCollided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n    setStage((prevStage) => updateStage(prevStage));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};\n\nexport default useStage;\n","import { useEffect, useRef } from \"react\";\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import { useCallback, useState, useEffect } from \"react\";\n\nconst useGameStatus = (rowsCleared) => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calculateScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(\n        (prevScore) => prevScore + linePoints[rowsCleared - 1] * (level + 1)\n      );\n      setRows((prevRows) => prevRows + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calculateScore();\n  }, [calculateScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n\nexport default useGameStatus;\n","import styled from \"styled-components\";\n\nexport const CellWrapper = styled.div`\n  width: auto;\n  background-color: rgba(${({ color }) => color}, 0.8);\n  border: ${({ type }) => (type === 0 ? 0 : \"4px solid\")};\n  border-bottom-color: rgba(${({ color }) => color}, 0.1);\n  border-right-color: rgba(${({ color }) => color}, 1);\n  border-top-color: rgba(${({ color }) => color}, 1);\n  border-left-color: rgba(${({ color }) => color}, 0.3);\n`;\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Helpers\nimport { TETROMINOS } from \"../../helpers/tetrominos\";\n\n// Styles\nimport { CellWrapper } from \"./styles\";\n\nconst Cell = ({ type }) => {\n  return <CellWrapper type={type} color={TETROMINOS[type]?.color} />;\n};\n\nCell.propTypes = {};\n\nexport default memo(Cell);\n","import styled from \"styled-components\";\n\nexport const StageWrapper = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${({ height }) => height},\n    calc(25vw / ${({ width }) => width})\n  );\n  grid-template-columns: repeat(${({ width }) => width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background-color: #111;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport Cell from \"../Cell\";\n\n// Styles\nimport { StageWrapper } from \"./styles\";\n\nconst Stage = ({ stage }) => {\n  return (\n    <StageWrapper width={stage[0]?.length} height={stage?.length}>\n      {stage.map((row) =>\n        row.map(([type], index) => <Cell key={index} type={type} />)\n      )}\n    </StageWrapper>\n  );\n};\n\nStage.propTypes = {};\n\nexport default Stage;\n","import styled from \"styled-components\";\n\nexport const StartButtonWrapper = styled.button`\n  box-sizing: border-box;\n  margin: 00 20px 0;\n  min-height: 30px;\n  padding: 20px;\n  border-radius: 12px;\n  background: #333;\n  font-family: \"Pixel\", sans-serif;\n  outline: 0;\n  cursor: pointer;\n  font-size: 1rem;\n  color: #fff;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styles\nimport { StartButtonWrapper } from \"./styles\";\n\nconst StartButton = ({ onClick }) => {\n  return <StartButtonWrapper onClick={onClick}>Start game</StartButtonWrapper>;\n};\n\nStartButton.propTypes = {};\n\nexport default StartButton;\n","import styled from \"styled-components\";\n\nexport const DisplayWrapper = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 12px;\n  color: ${({ isGameOver }) => (isGameOver ? \"red\" : \"#999\")};\n  font-family: \"Pixel\", sans-serif;\n  background: #000;\n  font-size: 0.8rem;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styles\nimport { DisplayWrapper } from \"./styles\";\n\nconst Display = ({ isGameOver, text }) => {\n  return <DisplayWrapper isGameOver={isGameOver}>{text}</DisplayWrapper>;\n};\n\nDisplay.propTypes = {};\n\nexport default Display;\n","import styled from \"styled-components\";\nimport backgroundImage from \"../../images/bg.png\";\n\nexport const TetrisWrapper = styled.div`\n  background: url(${backgroundImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport const TetrisContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    padding: 0 20px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Helpers\nimport { createStage, checkCollision } from \"../../helpers/gameHelpers\";\n\n// Hooks\nimport usePlayer from \"../../hooks/usePlayer\";\nimport useStage from \"../../hooks/useStage\";\nimport useInterval from \"../../hooks/useInterval\";\nimport useGameStatus from \"../../hooks/useGameStatus\";\n\n// Components\nimport Stage from \"../Stage\";\nimport StartButton from \"../StartButton\";\nimport Display from \"../Display\";\n\n// Styles\nimport { TetrisContainer, TetrisWrapper } from \"./style\";\n\nconst Tetris = () => {\n  const [speed, setSpeed] = useState(null);\n  const [isGameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPosition, resetPlayer, rotatePlayer] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  const movePlayer = (direction) => {\n    if (!checkCollision(player, stage, { x: direction, y: 0 })) {\n      updatePlayerPosition({ x: direction, y: 0 });\n    }\n  };\n\n  const startGame = () => {\n    setStage(createStage());\n    setSpeed(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (rows > (level + 1) * 10) {\n      setLevel((prevLevel) => prevLevel + 1);\n      setSpeed(1000 / (level + 1) + 200);\n    }\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPosition({ x: 0, y: 1, isCollided: false });\n    } else {\n      if (player.position.y < 1) {\n        setGameOver(true);\n        setSpeed(null);\n      }\n      updatePlayerPosition({ x: 0, y: 0, isCollided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    setSpeed(null);\n    drop();\n  };\n\n  const keyUpHandler = ({ keyCode }) => {\n    if (!isGameOver) {\n      if (keyCode === 40) {\n        setSpeed(1000 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const move = ({ keyCode }) => {\n    if (isGameOver) return;\n\n    if (keyCode === 37) {\n      movePlayer(-1);\n    } else if (keyCode === 39) {\n      movePlayer(1);\n    } else if (keyCode === 40) {\n      dropPlayer();\n    } else if (keyCode === 38) {\n      rotatePlayer(stage, 1);\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, speed);\n\n  return (\n    <TetrisWrapper\n      onKeyUp={keyUpHandler}\n      onKeyDown={(event) => move(event)}\n      tabindex=\"0\"\n      role=\"button\"\n    >\n      <TetrisContainer>\n        <Stage stage={stage} />\n        <aside>\n          {isGameOver ? (\n            <Display text=\"Game over\" isGameOver={isGameOver} />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`Rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton onClick={startGame} />\n        </aside>\n      </TetrisContainer>\n    </TetrisWrapper>\n  );\n};\n\nTetris.propTypes = {};\n\nexport default Tetris;\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\nimport PropTypes from \"prop-types\";\n\nconst App = (props) => {\n  return (\n    <div>\n      <Tetris />\n    </div>\n  );\n};\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}