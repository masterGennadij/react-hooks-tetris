{"version":3,"sources":["images/bg.png","helpers/tetrominos.js","components/Cell/styles.js","components/Cell/index.js","components/Stage/styles.js","components/Stage/index.js","components/StartButton/styles.js","components/StartButton/index.js","components/Display/styles.js","components/Display/index.js","components/Tetris/style.js","components/Tetris/index.js","helpers/gameHelpers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","CellWrapper","styled","div","type","Cell","StageWrapper","height","width","Stage","stage","length","map","row","index","key","StartButtonWrapper","button","StartButton","onClick","DisplayWrapper","isGameOver","Display","text","TetrisWrapper","backgroundImage","TetrisContainer","Tetris","props","Array","from","fill","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,gC,oJCA9BC,EAAa,CACxBC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,SAC1BC,EAAG,CACDF,MAAO,CACL,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEdC,MAAO,cAETE,EAAG,CACDH,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,IAEbC,MAAO,aAETG,EAAG,CACDJ,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,MAEXC,MAAO,cAETI,EAAG,CACDL,MAAO,CACL,CAAC,IAAK,KACN,CAAC,IAAK,MAERC,MAAO,cAETK,EAAG,CACDN,MAAO,CACL,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,EAAG,IAETC,MAAO,aAETM,EAAG,CACDP,MAAO,CACL,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,MAEbC,MAAO,aAETO,EAAG,CACDR,MAAO,CACL,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IAETC,MAAO,c,gTCtDJ,IAAMQ,EAAcC,IAAOC,IAAV,KAEG,qBAAGV,SAClB,mBAAwB,IAAxB,EAAGW,KAAyB,EAAI,eACd,qBAAGX,SACJ,qBAAGA,SACL,qBAAGA,SACF,qBAAGA,SCMhBY,EANF,SAAC,GAAc,IAAD,EAAXD,EAAW,EAAXA,KACd,OAAO,kBAACH,EAAD,CAAaG,KAAMA,EAAMX,MAAK,UAAEH,EAAWc,UAAb,aAAE,EAAkBX,S,sTCRpD,IAAMa,EAAeJ,IAAOC,IAAV,KAGnB,qBAAGI,UACS,qBAAGC,SAEa,qBAAGA,SCatBC,EAZD,SAAC,GAAe,IAAD,EAAZC,EAAY,EAAZA,MACf,OACE,kBAACJ,EAAD,CAAcE,MAAK,UAAEE,EAAM,UAAR,aAAE,EAAUC,OAAQJ,OAAM,OAAEG,QAAF,IAAEA,OAAF,EAAEA,EAAOC,QACnDD,EAAME,KAAI,SAACC,GAAD,OACTA,EAAID,KAAI,WAASE,GAAT,IAAEV,EAAF,2BAAmB,kBAAC,EAAD,CAAMW,IAAKD,EAAOV,KAAMA,Y,wTCXpD,IAAMY,EAAqBd,IAAOe,OAAV,KCUhBC,EANK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OAAO,kBAACH,EAAD,CAAoBG,QAASA,GAA7B,e,4WCLF,IAAMC,EAAiBlB,IAAOC,IAAV,KAUhB,qBAAGkB,WAA+B,MAAQ,UCAtCC,EANC,SAAC,GAA0B,IAAxBD,EAAuB,EAAvBA,WAAYE,EAAW,EAAXA,KAC7B,OAAO,kBAACH,EAAD,CAAgBC,WAAYA,GAAaE,I,icCJ3C,IAAMC,EAAgBtB,IAAOC,IAAV,IACNsB,KAOPC,EAAkBxB,IAAOC,IAAV,KCuBbwB,EApBA,SAACC,GACd,OACE,kBAACJ,EAAD,KACE,kBAACE,EAAD,KACE,kBAAC,EAAD,CAAOhB,MCdbmB,MAAMC,KAAKD,MAHe,KAGM,kBAC9B,IAAIA,MALmB,IAKAE,KAAK,CAAC,EAAG,eDc5B,+BACE,6BACE,kBAAC,EAAD,CAASR,KAAK,UACd,kBAAC,EAAD,CAASA,KAAK,SACd,kBAAC,EAAD,CAASA,KAAK,WAEhB,kBAAC,EAAD,UEXKS,EAVH,SAACJ,GACX,OACE,6BACE,kBAAC,EAAD,QCKcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.588dbeac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const TETROMINOS = {\n  0: { shape: [[0]], color: \"0,0,0\" },\n  I: {\n    shape: [\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n    ],\n    color: \"80,227,230\",\n  },\n  J: {\n    shape: [\n      [0, \"J\", 0],\n      [0, \"J\", 0],\n      [\"J\", \"J\", 0],\n    ],\n    color: \"36,95,223\",\n  },\n  L: {\n    shape: [\n      [0, \"L\", 0],\n      [0, \"L\", 0],\n      [0, \"L\", \"L\"],\n    ],\n    color: \"223,173,36\",\n  },\n  O: {\n    shape: [\n      [\"O\", \"O\"],\n      [\"O\", \"O\"],\n    ],\n    color: \"223,217,36\",\n  },\n  S: {\n    shape: [\n      [0, \"S\", \"S\"],\n      [\"S\", \"S\", 0],\n      [0, 0, 0],\n    ],\n    color: \"48,211,36\",\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      [0, \"T\", 0],\n      [\"T\", \"T\", \"T\"],\n    ],\n    color: \"132,61,36\",\n  },\n  Z: {\n    shape: [\n      [\"Z\", \"Z\", 0],\n      [0, \"Z\", \"Z\"],\n      [0, 0, 0],\n    ],\n    color: \"227,78,78\",\n  },\n};\n\nexport const generateTetrominos = () => {\n  const tetrominos = \"IJLOSTZ\";\n  return tetrominos[Math.floor(Math.random() * tetrominos.length)];\n};\n","import styled from \"styled-components\";\n\nexport const CellWrapper = styled.div`\n  width: auto;\n  background-color: rgba(${({ color }) => color}, 0.8);\n  border: ${({ type }) => (type === 0 ? 0 : \"4px solid\")};\n  border-bottom-color: rgba(${({ color }) => color}, 0.1);\n  border-right-color: rgba(${({ color }) => color}, 1);\n  border-top-color: rgba(${({ color }) => color}, 1);\n  border-left-color: rgba(${({ color }) => color}, 0.3);\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Helpers\nimport { TETROMINOS } from \"../../helpers/tetrominos\";\n\n// Styles\nimport { CellWrapper } from \"./styles\";\n\nconst Cell = ({ type }) => {\n  return <CellWrapper type={type} color={TETROMINOS[type]?.color} />;\n};\n\nCell.propTypes = {};\n\nexport default Cell;\n","import styled from \"styled-components\";\n\nexport const StageWrapper = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${({ height }) => height},\n    calc(25vw / ${({ width }) => width})\n  );\n  grid-template-columns: repeat(${({ width }) => width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background-color: #111;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport Cell from \"../Cell\";\n\n// Styles\nimport { StageWrapper } from \"./styles\";\n\nconst Stage = ({ stage }) => {\n  return (\n    <StageWrapper width={stage[0]?.length} height={stage?.length}>\n      {stage.map((row) =>\n        row.map(([type], index) => <Cell key={index} type={type} />)\n      )}\n    </StageWrapper>\n  );\n};\n\nStage.propTypes = {};\n\nexport default Stage;\n","import styled from \"styled-components\";\n\nexport const StartButtonWrapper = styled.button`\n  box-sizing: border-box;\n  margin: 00 20px 0;\n  min-height: 30px;\n  padding: 20px;\n  border-radius: 12px;\n  background: #333;\n  font-family: \"Pixel\", sans-serif;\n  outline: 0;\n  cursor: pointer;\n  font-size: 1rem;\n  color: #fff;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styles\nimport { StartButtonWrapper } from \"./styles\";\n\nconst StartButton = ({ onClick }) => {\n  return <StartButtonWrapper onClick={onClick}>Start game</StartButtonWrapper>;\n};\n\nStartButton.propTypes = {};\n\nexport default StartButton;\n","import styled from \"styled-components\";\n\nexport const DisplayWrapper = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 12px;\n  color: ${({ isGameOver }) => (isGameOver ? \"red\" : \"#999\")};\n  font-family: \"Pixel\", sans-serif;\n  background: #000;\n  font-size: 0.8rem;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Styles\nimport { DisplayWrapper } from \"./styles\";\n\nconst Display = ({ isGameOver, text }) => {\n  return <DisplayWrapper isGameOver={isGameOver}>{text}</DisplayWrapper>;\n};\n\nDisplay.propTypes = {};\n\nexport default Display;\n","import styled from \"styled-components\";\nimport backgroundImage from \"../../images/bg.png\";\n\nexport const TetrisWrapper = styled.div`\n  background: url(${backgroundImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport const TetrisContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 40px;\n  margin: 0 auto;\n  width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    padding: 0 20px;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Utils\nimport { createStage } from \"../../helpers/gameHelpers\";\n\n// Components\nimport Stage from \"../Stage\";\nimport StartButton from \"../StartButton\";\nimport Display from \"../Display\";\n\n// Styles\nimport { TetrisContainer, TetrisWrapper } from \"./style\";\n\nconst Tetris = (props) => {\n  return (\n    <TetrisWrapper>\n      <TetrisContainer>\n        <Stage stage={createStage()} />\n        <aside>\n          <div>\n            <Display text=\"score\" />\n            <Display text=\"rows\" />\n            <Display text=\"level\" />\n          </div>\n          <StartButton />\n        </aside>\n      </TetrisContainer>\n    </TetrisWrapper>\n  );\n};\n\nTetris.propTypes = {};\n\nexport default Tetris;\n","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\n  );\n","import React from \"react\";\nimport Tetris from \"./components/Tetris\";\nimport PropTypes from \"prop-types\";\n\nconst App = (props) => {\n  return (\n    <div>\n      <Tetris />\n    </div>\n  );\n};\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}